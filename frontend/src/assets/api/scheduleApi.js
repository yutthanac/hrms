/* ------------------------------------------------------------------
 *  scheduleApi.js  ‚Äì  Mock API (In‚Äëmemory)  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£
 *  ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå  ‚ûú  src / assets / api / scheduleApi.js
 * ------------------------------------------------------------------*/

/* ========= Mock Data ========= */
let employees = [
  { id: 'EMP-001', name: '‡∏¢‡∏∏‡∏ó‡∏ò‡∏ô‡∏≤ ‡∏ä‡∏±‡∏¢‡πÑ‡∏ò‡∏™‡∏á',    position: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' },
  { id: 'EMP-002', name: '‡∏ê‡∏≤‡∏ô‡∏∏‡∏û‡∏á‡∏®‡πå ‡∏û‡∏¥‡∏ä‡∏¥‡∏ï‡∏ß‡∏á‡∏®‡πå‡∏®‡∏£‡∏µ', position: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' },
  { id: 'EMP-003', name: '‡∏ò‡∏µ‡∏£‡πÄ‡∏ó‡∏û ‡πÉ‡∏à‡∏Å‡∏•‡πâ‡∏≤', position: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' },
];

let shifts = [
  { id: '2025-07-16_A_EMP-001', date: '2025-07-16', shift: 'A', empId: 'EMP-001', empName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ' },
];

/* ========= Utility ========= */
const pause = (ms) => new Promise((res) => setTimeout(res, ms));

/* ========= NAMED EXPORTS (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ) ========= */

/** ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
export async function getEmployees() {
  await pause(150);
  return [...employees];
}

/** ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
export async function getShifts() {
  await pause(150);
  return [...shifts];
}

/** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÄ‡∏ß‡∏£ */
export async function upsertShift(newShift) {
  await pause(120);
  // ‡πÉ‡∏ä‡πâ id ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà+‡∏Å‡∏∞+‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥
  if (!newShift.id) {
    newShift.id = `${newShift.date}_${newShift.shift}_${newShift.empId}`;
  }
  const idx = shifts.findIndex(s => s.id === newShift.id);
  if (idx > -1) shifts[idx] = newShift;  // update
  else          shifts.push(newShift);   // insert
}

/** ‡∏•‡∏ö‡πÄ‡∏ß‡∏£‡∏î‡πâ‡∏ß‡∏¢ id */
export async function deleteShift(id) {
  await pause(120);
  shifts = shifts.filter(s => s.id !== id);
}

/** ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
export async function clearAllShifts() {
  await pause(120);
  shifts = [];
  console.log('üîî [Mock] ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}

/** ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ß‡∏£‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */
export async function deleteShiftByDate(date) {
  await pause(120);
  shifts = shifts.filter(s => s.date !== date);
  console.log(`üîî [Mock] ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
}

/** ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ */
export async function broadcastScheduleNotice(date) {
  await pause(200);
  console.log(`üîî [Mock] ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
}
